generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id         String      @id @default(cuid())
  nome       String
  logo       String?
  ativo      Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  usuarios   Usuario[]
  alunos     Aluno[]
  exercicios Exercicio[]

  @@map("clientes")
}

model Usuario {
  id         String      @id @default(cuid())
  nome       String
  email      String      @unique
  senha      String
  role       Role        @default(USER)
  ativo      Boolean     @default(false)
  clienteId  String
  cliente    Cliente     @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  permissoes Permissao[]
  aluno      Aluno?

  @@map("usuarios")
}

model Permissao {
  id        String  @id @default(cuid())
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  recurso   String
  criar     Boolean @default(false)
  ler       Boolean @default(true)
  editar    Boolean @default(false)
  deletar   Boolean @default(false)

  @@unique([usuarioId, recurso])
  @@map("permissoes")
}

// ============================================
// MÓDULOS DE ACADEMIA
// ============================================

// Alunos (Pessoas que fazem treino)
model Aluno {
  id             String    @id @default(cuid())
  nome           String
  email          String?
  telefone       String?
  dataNascimento DateTime?
  foto           String?
  objetivo       String?
  observacoes    String?
  ativo          Boolean   @default(true)
  clienteId      String
  cliente        Cliente   @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  usuarioId      String?   @unique
  usuario        Usuario?  @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relacionamentos
  medidas    Medida[]
  treinos    Treino[]
  avaliacoes Avaliacao[]
  execucoes  ExecucaoTreino[] // ✅ NOVO

  @@map("alunos")
}

// Medidas físicas dos alunos
model Medida {
  id                  String   @id @default(cuid())
  alunoId             String
  aluno               Aluno    @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  peso                Float
  altura              Float
  peito               Float?
  cintura             Float?
  quadril             Float?
  bracoDireito        Float?
  bracoEsquerdo       Float?
  coxaDireita         Float?
  coxaEsquerda        Float?
  panturrilhaDireita  Float?
  panturrilhaEsquerda Float?
  observacoes         String?
  fotos               String[] @default([])
  data                DateTime @default(now())
  createdAt           DateTime @default(now())

  @@map("medidas")
}

// Avaliações físicas
model Avaliacao {
  id          String   @id @default(cuid())
  alunoId     String
  aluno       Aluno    @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  tipo        String?
  resultado   String?
  observacoes String?
  arquivo     String?
  data        DateTime @default(now())
  createdAt   DateTime @default(now())

  @@map("avaliacoes")
}

// Exercícios (Biblioteca)
model Exercicio {
  id            String        @id @default(cuid())
  nome          String
  grupoMuscular GrupoMuscular
  descricao     String?
  video         String?
  imagem        String?
  equipamento   String?
  clienteId     String
  cliente       Cliente       @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relacionamentos
  treinoExercicios TreinoExercicio[]

  @@map("exercicios")
}

// Treinos (Fichas)
model Treino {
  id          String    @id @default(cuid())
  nome        String
  descricao   String?
  alunoId     String
  aluno       Aluno     @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  objetivo    String?
  observacoes String?
  ativo       Boolean   @default(true)
  dataInicio  DateTime  @default(now())
  dataFim     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  exercicios  TreinoExercicio[]
  cronogramas Cronograma[]
  execucoes   ExecucaoTreino[]

  @@map("treinos")
}

// Relação Treino-Exercicio (com detalhes)
model TreinoExercicio {
  id          String    @id @default(cuid())
  treinoId    String
  treino      Treino    @relation(fields: [treinoId], references: [id], onDelete: Cascade)
  exercicioId String
  exercicio   Exercicio @relation(fields: [exercicioId], references: [id], onDelete: Cascade)
  ordem       Int
  series      Int
  repeticoes  String
  carga       String?
  descanso    String?
  observacoes String?
  createdAt   DateTime  @default(now())

  @@map("treino_exercicios")
}

// Cronograma (Divisão por dias)
model Cronograma {
  id         String    @id @default(cuid())
  treinoId   String
  treino     Treino    @relation(fields: [treinoId], references: [id], onDelete: Cascade)
  diaSemana  DiaSemana
  horaInicio String?
  horaFim    String?
  createdAt  DateTime  @default(now())

  @@unique([treinoId, diaSemana])
  @@map("cronogramas")
}

// Execução de Treino (Histórico) - ✅ ATUALIZADO
model ExecucaoTreino {
  id          String   @id @default(cuid())
  treinoId    String
  treino      Treino   @relation(fields: [treinoId], references: [id], onDelete: Cascade)
  alunoId     String // ✅ NOVO
  aluno       Aluno    @relation(fields: [alunoId], references: [id], onDelete: Cascade) // ✅ NOVO
  intensidade String // ✅ NOVO: "LEVE", "MODERADO", "PESADO", "MUITO_PESADO"
  data        DateTime @default(now())
  observacoes String?  @db.Text // ✅ ATUALIZADO
  completo    Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relacionamentos
  exercicios ExecucaoExercicio[]

  @@index([treinoId]) // ✅ NOVO
  @@index([alunoId]) // ✅ NOVO
  @@index([data]) // ✅ NOVO
  @@map("execucoes_treino")
}

// Execução de Exercício (Detalhes da execução)
model ExecucaoExercicio {
  id               String         @id @default(cuid())
  execucaoTreinoId String
  execucaoTreino   ExecucaoTreino @relation(fields: [execucaoTreinoId], references: [id], onDelete: Cascade)
  treinoExercicioId String?        // ✅ NOVO - Referência ao TreinoExercicio
  exercicioNome    String
  series           Int
  repeticoes       String
  carga            String?
  observacoes      String?
  createdAt        DateTime       @default(now())

  @@map("execucoes_exercicio")
}

// ============================================
// ENUMS
// ============================================

enum GrupoMuscular {
  PEITO
  COSTAS
  OMBROS
  BICEPS
  TRICEPS
  PERNAS
  GLUTEOS
  ABDOMEN
  PANTURRILHA
  ANTEBRACO
  CARDIO
  FUNCIONAL
}

enum DiaSemana {
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
  DOMINGO
}

enum Role {
  SUPERADMIN
  ADMIN
  ALUNO
  USER
}
